{
  "fork-join": {
    "prefix": "fork join",
    "body": [
      "fork",
      "\t$1",
      "join $0"
    ],
    "description": "fork ... join"
  },
  "fork-join_any": {
    "prefix": "fork join_any",
    "body": [
      "fork",
      "\t$0",
      "join_any $0"
    ],
    "description": "fork ... join_any"
  },
  "fork-join_none": {
    "prefix": "fork join_none",
    "body": [
      "fork",
      "\t$0",
      "join_none $0"
    ],
    "description": "fork ... join_none"
  },
  "repeat": {
    "prefix": "repeat",
    "body": [
      "repeat (${1:times}) begin",
      "\t$0",
      "end $0"
    ],
    "description": "repeat (...) begin ... end"
  },
  "begin/end": {
    "prefix": "begin",
    "body": [
      "begin",
      "\t$1",
      "end $0"
    ],
    "description": "Insert a begin ... end block"
  },
  "initial": {
    "prefix": "initial",
    "body": [
      "initial begin",
      "\t$0",
      "end $0"
    ],
    "description": "initial begin ... end"
  },
  "if": {
    "prefix": "if",
    "body": [
      "if (${1:conditions}) begin",
      "\t$2",
      "end $0"
    ],
    "description": "if (...) begin ... end"
  },
  "else begin": {
    "prefix": "elseBegin",
    "body": [
      "else begin",
      "\t$1",
      "end $0"
    ],
    "description": "else begin statement"
  },
  "else if": {
    "prefix": "elif",
    "body": [
      "else if($1) begin",
      "\t$2",
      "end $0"
    ],
    "description": "else if statement"
  },
  "for loop": {
    "prefix": "for",
    "body": [
      "for ($1; $2; $3) begin",
      "\t$4",
      "end $0"
    ],
    "description": "for (...) begin ... end"
  },
  "while loop": {
    "prefix": "while",
    "body": [
      "while ($1) begin",
      "\t$2",
      "end $0"
    ],
    "description": "while (...) begin ... end"
  },
  "forever": {
    "prefix": "forever",
    "body": [
      "forever begin",
      "\t$1",
      "end $0"
    ],
    "description": "forever begin ... end"
  },
  "function": {
    "prefix": "function",
    "body": [
      "function $1;",
      "\t$2",
      "endfunction $0"
    ],
    "description": "function (...) ... endfunction"
  },
  "task": {
    "prefix": "task",
    "body": [
      "task ${1};",
      "\t$2",
      "endtask $0"
    ],
    "description": "task statement"
  },
  "sv_always_comb": {
    "prefix": "sv_always_comb",
    "body": [
      "always_comb begin${1:: <process_label>}",
      "\t$0",
      "end$1"
    ],
    "description": "Always block for combinatorial logics."
  },
  "sv_always_ff": {
    "prefix": "sv_always_ff",
    "body": [
      "always_ff @(posedge ${1:clk}) begin${2:: <process_label>}",
      "\t$0",
      "end$2\n"
    ],
    "description": "Always block for synchronous logics."
  },
  "sv_always_ff_with_rst": {
    "prefix": "sv_always_ff_with_rst",
    "body": [
      "always_ff @(posedge ${1:clk}) begin${2:: <process_label>}",
      "\tif (${3:rst}) begin${4:: <rst_branch_label>}",
      "\t\t$0",
      "\tend$4",
      "\telse begin${5:: <no_rst_branch_label>}",
      "\t\t",
      "\tend$5",
      "end$2\n"
    ],
    "description": "Always block for synchronous logics with reset support."
  },
  "bits": {
    "prefix": "$bits",
    "body": [
      "\\$bits($1)$0"
    ],
    "description": "The $bits system function returns the number of bits required to hold an expression as a bit stream."
  },
  "cast": {
    "prefix": "$cast",
    "body": [
      "\\$cast(${1:singular_dest_var}, ${2:singular_source_expr})$0"
    ],
    "description": "The $cast system function performs a dynamic cast of an expression type."
  },
  "sformatf": {
    "prefix": "$sformatf",
    "body": [
      "\\$sformatf(\"$1\", $2)$0"
    ],
    "description": "Returns a formatted string."
  },
  "timeformat": {
    "prefix": "$timeformat",
    "body": [
      "\\$timeformat(${1:units_number}, ${2:precision_number}, ${3:suffix_string}, ${4:minimum_field_width});\n$0"
    ],
    "description": "The $timeformat system task specifies how the %t format specification reports time information."
  },
  "urandom_range": {
    "prefix": "$urandom_range",
    "body": [
      "\\$urandom_range(${1:maxval}, ${2:minval = 0})$0"
    ],
    "description": "The $urandom_range() function returns an unsigned integer within a specified range."
  }
}
{
  "systemverilog_fork_join": {
    "prefix": "sv_block_parallel",
    "body": [
      "fork${1:: label}",
      "\t$0",
      "join${2:}$1",
      "${3:// disable fork;}\n"
    ],
    "description": "The fork-join parallel block construct enables the creation of concurrent processes from each of its parallel statements."
  },
  "systemverilog_begin_end": {
    "prefix": "sv_block_sequential",
    "body": [
      "begin${1:: label}",
      "\t$0",
      "end$1\n"
    ],
    "description": "The procedural statements in a sequential block shall be executed sequentially in the given order."
  },
  "systemverilog_if_else": {
    "prefix": "sv_if",
    "body": [
      "if (${1:condition}) ${2:true_block_statement}",
      "else ${3:false_block_statement}\n$0"
    ],
    "description": "The conditional statement (or if–else statement) is used to make a decision about whether a statement is executed."
  },
  "systemverilog_if_else_with_blocks": {
    "prefix": "sv_if_blocks",
    "body": [
      "if (${1:condition}) begin",
      "\t$0",
      "end",
      "else begin",
      "\t",
      "end\n"
    ],
    "description": "The conditional statement (or if–else statement) is used to make a decision about whether a statement is executed."
  },
  "systemverilog_if_else_with_blocks_labels": {
    "prefix": "sv_if_blocks_labels",
    "body": [
      "if (${1:condition}) begin${2:: true_block_label}",
      "\t$0",
      "end$2",
      "else begin${3:: false_block_label}",
      "\t",
      "end$3\n"
    ],
    "description": "The conditional statement (or if–else statement) is used to make a decision about whether a statement is executed."
  },
  "systemverilog_function": {
    "prefix": "sv_function",
    "body": [
      "$5function ${1:return} ${2:$TM_FILENAME_BASE}${3:::}${4:name}(${6:parameters});",
      "\t$0",
      "endfunction: $4\n"
    ],
    "description": "function ... endfunction construct"
  },
  "systemverilog_task": {
    "prefix": "sv_task",
    "body": [
      "$4task ${1:$TM_FILENAME_BASE}${2:::}${3:name}(${5:parameters});",
      "\t$0",
      "endtask: $3\n"
    ],
    "description": "task  ... endtask construct"
  },
  "sv_always_comb": {
    "prefix": "sv_always_comb",
    "body": [
      "always_comb begin${1:: <process_label>}",
      "\t$0",
      "end$1"
    ],
    "description": "Always block for combinatorial logics."
  },
  "sv_always_ff": {
    "prefix": "sv_always_ff",
    "body": [
      "always_ff @(posedge ${1:clk}) begin${2:: <process_label>}",
      "\t$0",
      "end$2\n"
    ],
    "description": "Always block for synchronous logics."
  },
  "sv_always_ff_with_rst": {
    "prefix": "sv_always_ff_with_rst",
    "body": [
      "always_ff @(posedge ${1:clk}) begin${2:: <process_label>}",
      "\tif (${3:rst}) begin${4:: <rst_branch_label>}",
      "\t\t$0",
      "\tend$4",
      "\telse begin${5:: <no_rst_branch_label>}",
      "\t\t",
      "\tend$5",
      "end$2\n"
    ],
    "description": "Always block for synchronous logics with reset support."
  },
  "bits": {
    "prefix": "$bits",
    "body": [
      "\\$bits($1)$0"
    ],
    "description": "The $bits system function returns the number of bits required to hold an expression as a bit stream."
  },
  "cast": {
    "prefix": "$cast",
    "body": [
      "\\$cast(${1:singular_dest_var}, ${2:singular_source_expr})$0"
    ],
    "description": "The $cast system function performs a dynamic cast of an expression type."
  },
  "sformatf": {
    "prefix": "$sformatf",
    "body": [
      "\\$sformatf(\"$1\", $2)$0"
    ],
    "description": "Returns a formatted string."
  },
  "timeformat": {
    "prefix": "$timeformat",
    "body": [
      "\\$timeformat(${1:units_number}, ${2:precision_number}, ${3:suffix_string}, ${4:minimum_field_width});\n$0"
    ],
    "description": "The $timeformat system task specifies how the %t format specification reports time information."
  },
  "urandom_range": {
    "prefix": "$urandom_range",
    "body": [
      "\\$urandom_range(${1:maxval}, ${2:minval = 0})$0"
    ],
    "description": "The $urandom_range() function returns an unsigned integer within a specified range."
  }
}